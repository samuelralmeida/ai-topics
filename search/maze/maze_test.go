package maze

import (
	"testing"

	"github.com/samuelralmeida/ai-topics/search/entity"
	"github.com/stretchr/testify/assert"
)

func TestMaze_buildWalls(t *testing.T) {
	type args struct {
		filename string
	}
	tests := []struct {
		name    string
		args    args
		want    [][]string
		wantErr bool
	}{
		{
			name: "maze1",
			args: args{filename: "maze1.txt"},
			want: [][]string{
				{"#", "#", "#", "#", "#", "B", "#"},
				{"#", "#", "#", "#", "#", " ", "#"},
				{"#", "#", "#", "#", " ", " ", "#"},
				{"#", "#", "#", "#", " ", "#", "#"},
				{" ", " ", " ", " ", " ", "#", "#"},
				{"A", "#", "#", "#", "#", "#", "#"},
			},
			wantErr: false,
		},
		{
			name: "maze2",
			args: args{filename: "maze2.txt"},
			want: [][]string{
				{"#", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#"},
				{"#", " ", " ", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", " ", " ", "#", " ", "#"},
				{"#", " ", "#", "#", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", " ", " ", " ", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", " ", "#", " ", "#", "#", " ", "#", "#", "#", " ", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#"},
				{"#", " ", "#", " ", " ", " ", " ", "#", " ", " ", " ", "#", "#", "B", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", " ", "#", " ", "#"},
				{"#", " ", "#", " ", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", " ", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", "#", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", "#", " ", " ", " ", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", "#", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", "#", "#", "#", " ", "#", "#", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", " ", " ", " ", "#"},
				{"A", " ", " ", " ", " ", " ", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"},
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			maze := Maze{}

			err := maze.buildWalls(tt.args.filename)
			assert.Equal(t, tt.wantErr, err != nil)

			got := maze.Walls
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestMaze_possibleActions(t *testing.T) {
	maze := Maze{
		Walls: [][]string{
			{"#", "#", " ", " ", " ", " ", "#"},
			{"#", "#", " ", "#", "#", " ", "#"},
			{"#", "B", " ", "#", " ", " ", "#"},
			{"#", " ", "#", "#", " ", "#", "#"},
			{" ", " ", " ", " ", " ", "#", "#"},
			{"A", "#", "#", "#", "#", "#", "#"},
		},
		Height: 5,
		Width:  6,
	}

	actions := maze.possibleActions(entity.Coordinate{Row: 4, Collumn: 1})
	assert.Len(t, actions, 3)

	for _, action := range actions {
		if action.Description == "up" {
			assert.Equal(t, 3, action.Row)
			assert.Equal(t, 1, action.Collumn)
		}
		if action.Description == "left" {
			assert.Equal(t, 4, action.Row)
			assert.Equal(t, 0, action.Collumn)
		}
		if action.Description == "right" {
			assert.Equal(t, 4, action.Row)
			assert.Equal(t, 2, action.Collumn)
		}
	}
}
