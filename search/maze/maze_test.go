package maze

import (
	"reflect"
	"testing"
)

func TestMaze_buildWalls(t *testing.T) {
	type args struct {
		filename string
	}
	tests := []struct {
		name    string
		args    args
		want    [][]string
		wantErr bool
	}{
		{
			name: "maze1",
			args: args{filename: "maze1.txt"},
			want: [][]string{
				{"#", "#", "#", "#", "#", "B", "#"},
				{"#", "#", "#", "#", "#", " ", "#"},
				{"#", "#", "#", "#", " ", " ", "#"},
				{"#", "#", "#", "#", " ", "#", "#"},
				{" ", " ", " ", " ", " ", "#", "#"},
				{"A", "#", "#", "#", "#", "#", "#"},
			},
			wantErr: false,
		},
		{
			name: "maze2",
			args: args{filename: "maze2.txt"},
			want: [][]string{
				{"#", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#"},
				{"#", " ", " ", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", " ", " ", "#", " ", "#"},
				{"#", " ", "#", "#", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", " ", " ", " ", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", " ", "#", " ", "#", "#", " ", "#", "#", "#", " ", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#"},
				{"#", " ", "#", " ", " ", " ", " ", "#", " ", " ", " ", "#", "#", "B", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", " ", "#", " ", "#"},
				{"#", " ", "#", " ", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", " ", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", "#", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", "#", " ", " ", " ", " ", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", "#", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", "#", " ", "#", "#", "#", "#", "#", "#", "#", " ", "#", " ", "#", " ", "#"},
				{"#", "#", "#", "#", "#", "#", " ", "#", "#", "#", "#", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", "#", " ", " ", " ", "#"},
				{"A", " ", " ", " ", " ", " ", " ", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#", "#"},
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			maze := Maze{}

			err := maze.buildWalls(tt.args.filename)
			if (err != nil) != tt.wantErr {
				t.Errorf("BuldWalls() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			got := maze.Walls
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("BuldWalls() walls = %v, want %v", got, tt.want)
			}
		})
	}
}
